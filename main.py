from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, \
    InlineKeyboardButton, InputFile
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import db
from funcs import DataManager

TOKEN = '6436284246:AAEb8aEUhFvIegTMMa77mJ2gxYCQJDiuujc'

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


async def on_startup(_):
    await db.db_connect()

data_manager = DataManager()


class Profile(StatesGroup):
    age = State()
    gender = State()
    pets_flag = State()
    kids_flag = State()


categories = ['–ï–¥–∞ –∏ –ø—Ä–æ–¥—É–∫—Ç—ã', '–û–¥–µ–∂–¥–∞, –æ–±—É–≤—å', '–î–æ–º –∏ —Ä–µ–º–æ–Ω—Ç', '–ï–¥–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π',
              '–¶–≤–µ—Ç—ã –∏ –ø–æ–¥–∞—Ä–∫–∏', '–û–±—É—á–µ–Ω–∏–µ', '–ê–ø—Ç–µ–∫–∏ –∏ –º–µ–¥–∏—Ü–∏–Ω–∞', '–ê–≤—Ç–æ', '–ö—Ä–∞—Å–æ—Ç–∞ –∏ –ø–∞—Ä—Ñ—é–º–µ—Ä–∏—è',
              '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–ö–∞—Ñ–µ, –±–∞—Ä—ã –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã', '–¢–æ–≤–∞—Ä—ã –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö', '–°–ø–æ—Ä—Ç', '–£—Ö–æ–¥ –∑–∞ —Å–æ–±–æ–π',
              '–•–æ–±–±–∏ –∏ —Ä–∞–≤–ª–µ—á–µ–Ω–∏—è', '–£—Å–ª—É–≥–∏ –∏ —Å–µ—Ä–≤–∏—Å', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '–¢–∞–∫—Å–∏ –∏ –∫–∞—Ä—à–µ—Ä–∏–Ω–≥',
              '–Æ–≤–µ–ª–∏—Ä–Ω—ã–µ –∏–∑–ª–µ–¥–∏—è –∏ —á–∞—Å—ã', '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–µ—Ç–µ–π', '–û–ø—Ç–∏–∫–∞', '–ö–Ω–∏–≥–∏, –∫–∏–Ω–æ, –∏—Å–∫—É—Å—Å—Ç–≤–æ']


async def create_subjects_keyboard(user_id):
    keyboard = InlineKeyboardMarkup()
    selected_categories = await db.get_categories(user_id)
    for category in categories:
        # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ –≤—ã–±—Ä–∞–Ω, –¥–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π
        if category in selected_categories:
            keyboard.add(InlineKeyboardButton(f'‚úÖ {category}', callback_data=f'subject:{category}:unselect'))
        else:
            keyboard.add(InlineKeyboardButton(f'‚ùå {category}', callback_data=f'subject:{category}:select'))
    keyboard.add(InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data=f'subject:{""}:done'))
    return keyboard


@dp.callback_query_handler(lambda c: c.data == 'show_recommendations')
async def show_recommendations(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    rec_item_id = data_manager.get_first_recs(user_id)

    img_url, category, text_info = data_manager.get_item_data(rec_item_id)
    # img_url = 'pics/nutella.png'
    # text_info = 'Nutella\n\nNutella - –æ—Ä–µ—Ö–æ–≤–∞—è –ø–∞—Å—Ç–∞ —Å –∫–∞–∫–∞–æ –∏ —Å–Ω–µ–∫–∏ —Å Nutella.\n\n–ö—ç—à–±–µ–∫ 10%\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã, –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –¥–æ–±–∞–≤—å—Ç–µ —á–µ–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¢–∏–Ω—å–∫–æ—Ñ—Ñ: –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ —Å —á–µ–∫–∞.\n–£—Å–ª–æ–≤–∏—è:\n–ê–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã Nutella –≤–æ –≤—Å–µ—Ö –æ—Ñ–ª–∞–π–Ω- –∏ –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω–∞—Ö, –∫—Ä–æ–º–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ ¬´–ú–µ–≥–∞–º–∞—Ä–∫–µ—Ç¬ª, ¬´–Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç¬ª, Ozon, Wildberries.\n–ú–∞–∫—Å–∏–º—É–º –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è –∞–∫—Ü–∏–∏ ‚Äî 500 –±–æ–Ω—É—Å–æ–≤.\n–ë–æ–Ω—É—Å—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –¥–Ω–µ–π –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏.'

    print(img_url)
    with open(img_url, 'rb') as photo:
        photo = InputFile(photo)
        await bot.send_photo(user_id, photo, caption=text_info)

    keyboard = InlineKeyboardMarkup()
    button1 = InlineKeyboardButton("üíî", callback_data=f"button1:{rec_item_id}")
    button2 = InlineKeyboardButton("‚ù§", callback_data=f"button2:{rec_item_id}")
    keyboard.add(button1, button2)

    await bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('button'))
async def process_callback_button(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    button_number, item_id = callback_query.data.split(":")
    if button_number[-1] == '1':
        db.write_feedback(user_id, int(item_id), -1, callback_query.message.date)
    elif button_number[-1] == '2':
        db.write_feedback(user_id, int(item_id), 1, callback_query.message.date)
    await show_recommendations(callback_query)


@dp.message_handler(lambda message: message.text == "–í—ã–±—Ä–∞—Ç—å –ª—é–±–∏–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                    state="*")
async def process_start_command(message: types.Message):
    user_id = message.from_user.id
    keyboard = await create_subjects_keyboard(user_id)
    await message.answer(text="–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –ª—é–±–∏–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('subject:'))
async def process_subject_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    subject, action = callback_query.data.split(':')[1:]
    selected_subjects = await db.get_categories(user_id)
    if action == 'select':
        selected_subjects.append(subject)
    elif action == 'unselect':
        selected_subjects.remove(subject)
    elif action == "done":
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="show_recommendations"))
        await bot.edit_message_reply_markup(callback_query.message.chat.id, callback_query.message.message_id,
                                            reply_markup=keyboard)
    await db.write_categories(user_id, selected_subjects)
    new_keyboard = await create_subjects_keyboard(user_id)
    if new_keyboard.inline_keyboard != callback_query.message.reply_markup.inline_keyboard:
        await bot.edit_message_reply_markup(callback_query.message.chat.id, callback_query.message.message_id,
                                            reply_markup=new_keyboard)
    # await bot.answer_callback_query(callback_query.id, f'–¢—ã –≤—ã–±—Ä–∞–ª –ø—Ä–µ–¥–º–µ—Ç—ã: {", ".join(selected_subjects)}')


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    if await db.user_exists(message.from_user.id):
        # send recs
        await bot.send_message(message.from_user.id, "–†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞!")
    else:
        await bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç!\n–î–ª—è –Ω–∞—á–∞–ª–∞ –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∫–æ–µ-—á—Ç–æ –æ —Ç–µ–±–µ.")
        await message.answer("–£–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:\n")
        await Profile.age.set()


# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
@dp.message_handler(state=Profile.age)
async def get_age(message, state):
    if message.text.isdigit() and 1 <= int(message.text) <= 120:
        async with state.proxy() as data:
            data['age'] = int(message.text)
        female = KeyboardButton('–ñ–µ–Ω—â–∏–Ω–∞')
        male = KeyboardButton('–ú—É–∂—á–∏–Ω–∞')
        buttons = ReplyKeyboardMarkup(one_time_keyboard=True)
        buttons.add(female, male)
        await message.answer('–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª', reply_markup=buttons)
        await Profile.next()
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç')


# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–µ–Ω–¥–µ—Ä–∞
@dp.message_handler(state=Profile.gender)
async def get_gender(message, state):
    async with state.proxy() as data:
        data['gender'] = message.text
    buttons = ReplyKeyboardRemove()
    yes = KeyboardButton('–î–∞')
    no = KeyboardButton('–ù–µ—Ç')
    buttons = ReplyKeyboardMarkup(one_time_keyboard=True)
    buttons.add(yes, no)
    await message.answer('–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –¥–æ–º–∞—à–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ?', reply_markup=buttons)
    await Profile.next()


# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö
@dp.message_handler(state=Profile.pets_flag)
async def get_pets(message, state):
    async with state.proxy() as data:
        data['pets_flag'] = message.text
    yes = KeyboardButton('–î–∞')
    no = KeyboardButton('–ù–µ—Ç')
    buttons = ReplyKeyboardMarkup(one_time_keyboard=True)
    buttons.add(yes, no)
    await message.answer('–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –¥–µ—Ç–∏?', reply_markup=buttons)
    await Profile.next()


# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ—Ç–µ–π
@dp.message_handler(state=Profile.kids_flag)
async def get_kids(message, state):
    async with state.proxy() as data:
        data['kids_flag'] = message.text
        data['creation_time'] = message.date
    await db.create_profile(state, user_id=message.from_user.id)
    fill_categories = KeyboardButton("–í—ã–±—Ä–∞—Ç—å –ª—é–±–∏–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    buttons = ReplyKeyboardMarkup(one_time_keyboard=True)
    buttons.add(fill_categories)
    await message.answer('–ó–¥–æ—Ä–æ–≤–æ! –û—Å—Ç–∞–ª–æ—Å—å —É–∑–Ω–∞—Ç—å —Ç–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:', reply_markup=buttons)
    await state.finish()


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await message.reply("–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –∫–æ–º–∞–Ω–¥")


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
